name: Dependabot Deployments and Comments

on:
 pull_request:
    branches: [main]
    types: [opened, synchronize, closed]
    paths:
      - "package.json"
      - "package-lock.json"

jobs:
 deploy:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm i -g vercel
        env:
          TEST_KEY: ${{ secrets.TEST_KEY }}
        continue-on-error: true

      - name: Comment on Vercel CLI Installation
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.TEST_KEY }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const message = 'Vercel CLI installed successfully.';
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: message
            });

      - name: Deploy to Vercel Preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_BOT_DEPLOY }}
        run: vercel --token $VERCEL_TOKEN --preview
        continue-on-error: true

      - name: Comment on Deployment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.TEST_KEY }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const message = 'Deployment to Vercel preview started.';
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: message
            });

 label-and-manage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Label Dependabot PRs
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.HYPERCRITICAL_SECRET }}
          script: |
            console.log(`Pull Request Number: ${context.issue.number}`);
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const pr = await github.rest.pulls.get({ owner, repo, pull_number: pr_number });
            if (pr.data.user.login === 'dependabot[bot]') {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pr_number,
                labels: ['dependencies']
              });
              const message = 'PR labeled as dependencies.';
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: message
              });
            }

      - name: Delete branch
        if: github.event.pull_request.merged == true && github.event.pull_request.user.login == 'dependabot[bot]'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.HYPERCRITICAL_SECRET }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const pr = await github.rest.pulls.get({ owner, repo, pull_number: pr_number });
            if (pr.data.merged) {
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `heads/${pr.data.head.ref}`
              });
              const message = 'Branch deleted after merge.';
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: message
              });
            }

      - name: Comment on Merge
        if: github.event.pull_request.merged == true
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.HYPERCRITICAL_SECRET }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const message = 'PR successfully merged!';
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: message
            });
